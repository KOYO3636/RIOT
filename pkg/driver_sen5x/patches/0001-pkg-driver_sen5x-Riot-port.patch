From 7a38faadaf53d16ecc930e408a3982fed36139a6 Mon Sep 17 00:00:00 2001
From: Daniel Prigoshij <prigoshi@pc15.ibr.cs.tu-bs.de>
Date: Mon, 8 Apr 2024 15:36:31 +0200
Subject: [PATCH 1/2] pkg/driver_sen5x: Riot port

---
 sensirion_i2c_hal.c | 60 +++++++++++++++++----------------------------
 sensirion_i2c_hal.h | 23 ++++++-----------
 2 files changed, 29 insertions(+), 54 deletions(-)

diff --git a/sensirion_i2c_hal.c b/sensirion_i2c_hal.c
index d63f815..6949faf 100644
--- a/sensirion_i2c_hal.c
+++ b/sensirion_i2c_hal.c
@@ -29,48 +29,32 @@
  * POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "ztimer.h"
 #include "sensirion_i2c_hal.h"
 #include "sensirion_common.h"
 #include "sensirion_config.h"
-
-/*
- * INSTRUCTIONS
- * ============
- *
- * Implement all functions where they are marked as IMPLEMENT.
- * Follow the function specification in the comments.
- */
-
-/**
- * Select the current i2c bus by index.
- * All following i2c operations will be directed at that bus.
- *
- * THE IMPLEMENTATION IS OPTIONAL ON SINGLE-BUS SETUPS (all sensors on the same
- * bus)
- *
- * @param bus_idx   Bus index to select
- * @returns         0 on success, an error code otherwise
- */
-int16_t sensirion_i2c_hal_select_bus(uint8_t bus_idx) {
-    /* TODO:IMPLEMENT or leave empty if all sensors are located on one single
-     * bus
-     */
-    return NOT_IMPLEMENTED_ERROR;
-}
+#include "sen5x_params.h"
 
 /**
  * Initialize all hard- and software components that are needed for the I2C
  * communication.
  */
-void sensirion_i2c_hal_init(void) {
-    /* TODO:IMPLEMENT */
+void sensirion_i2c_hal_init(void)
+{
+
+    // initialize the bus
+    i2c_init(SEN5X_PARAM_I2C_DEV);
+
+    // first, acquire the shared bus again
+    i2c_acquire(SEN5X_PARAM_I2C_DEV);
 }
 
 /**
  * Release all resources initialized by sensirion_i2c_hal_init().
  */
-void sensirion_i2c_hal_free(void) {
-    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
+void sensirion_i2c_hal_free(void)
+{
+    i2c_release(SEN5X_PARAM_I2C_DEV);
 }
 
 /**
@@ -83,9 +67,9 @@ void sensirion_i2c_hal_free(void) {
  * @param count   number of bytes to read from I2C and store in the buffer
  * @returns 0 on success, error code otherwise
  */
-int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
-    /* TODO:IMPLEMENT */
-    return NOT_IMPLEMENTED_ERROR;
+int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t *data, uint16_t count)
+{
+    return i2c_read_bytes(SEN5X_PARAM_I2C_DEV, address, data, count, 0);
 }
 
 /**
@@ -99,10 +83,9 @@ int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
  * @param count   number of bytes to read from the buffer and send over I2C
  * @returns 0 on success, error code otherwise
  */
-int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
-                               uint16_t count) {
-    /* TODO:IMPLEMENT */
-    return NOT_IMPLEMENTED_ERROR;
+int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t *data, uint16_t count)
+{
+    return i2c_write_bytes(SEN5X_PARAM_I2C_DEV, address, data, count, 0);
 }
 
 /**
@@ -113,6 +96,7 @@ int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
  *
  * @param useconds the sleep time in microseconds
  */
-void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
-    /* TODO:IMPLEMENT */
+void sensirion_i2c_hal_sleep_usec(uint32_t useconds)
+{
+    ztimer_sleep(ZTIMER_USEC ,useconds);
 }
diff --git a/sensirion_i2c_hal.h b/sensirion_i2c_hal.h
index f97444a..d35a11b 100644
--- a/sensirion_i2c_hal.h
+++ b/sensirion_i2c_hal.h
@@ -33,23 +33,14 @@
 #define SENSIRION_I2C_HAL_H
 
 #include "sensirion_config.h"
+#include "sen5x_params.h"
+#include "ztimer.h"
+#include "periph/i2c.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif /* __cplusplus */
 
-/**
- * Select the current i2c bus by index.
- * All following i2c operations will be directed at that bus.
- *
- * THE IMPLEMENTATION IS OPTIONAL ON SINGLE-BUS SETUPS (all sensors on the same
- * bus)
- *
- * @param bus_idx   Bus index to select
- * @returns         0 on success, an error code otherwise
- */
-int16_t sensirion_i2c_hal_select_bus(uint8_t bus_idx);
-
 /**
  * Initialize all hard- and software components that are needed for the I2C
  * communication.
@@ -71,7 +62,7 @@ void sensirion_i2c_hal_free(void);
  * @param count   number of bytes to read from I2C and store in the buffer
  * @returns 0 on success, error code otherwise
  */
-int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count);
+int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t *data, uint16_t count);
 
 /**
  * Execute one write transaction on the I2C bus, sending a given number of
@@ -84,7 +75,7 @@ int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count);
  * @param count   number of bytes to read from the buffer and send over I2C
  * @returns 0 on success, error code otherwise
  */
-int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
+int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t *data,
                                uint16_t count);
 
 /**
@@ -107,6 +98,6 @@ void sensirion_i2c_hal_sleep_usec(uint32_t useconds);
 
 #ifdef __cplusplus
 }
-#endif /* __cplusplus */
+#endif  /* __cplusplus */
 
-#endif /* SENSIRION_I2C_HAL_H */
+#endif  /* SENSIRION_I2C_HAL_H */
-- 
2.34.1

